networks:
  coffeeshop-net:
    driver: bridge

services:
  # 1) PostgreSQL
  postgres:
    image: meraviglioso8/postgres:dev-latest
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - coffeeshop-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # 2) RabbitMQ
  rabbitmq:
    image: meraviglioso8/rabbitmq:dev-latest
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - coffeeshop-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # 3) Product service (gRPC on 5001)
  product:
    image: meraviglioso8/go-coffeeshop-product:dev-latest
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      APP_NAME: ${APP_NAME}
    ports:
      - "5001:5001"
    networks:
      - coffeeshop-net

  # 4) Counter service (gRPC on 5002)
  counter:
    image: meraviglioso8/go-coffeeshop-counter:dev-latest
    restart: always
    depends_on:
      - product
      - postgres
      - rabbitmq
    environment:
      APP_NAME: ${APP_NAME}
      IN_DOCKER: "true"
      PG_URL: ${PG_URL}
      PG_DSN_URL: ${PG_DSN_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      PRODUCT_CLIENT_URL: ${PRODUCT_CLIENT_URL}
    ports:
      - "5002:5002"
    networks:
      - coffeeshop-net

  # 5) Barista service
  barista:
    image: meraviglioso8/go-coffeeshop-barista:dev-latest
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      APP_NAME: coffeeshop-barista
      IN_DOCKER: "true"
      PG_URL: ${PG_URL}
      PG_DSN_URL: ${PG_DSN_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    networks:
      - coffeeshop-net

  # 6) Kitchen service
  kitchen:
    image: meraviglioso8/go-coffeeshop-kitchen:dev-latest
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      APP_NAME: coffeeshop-kitchen
      IN_DOCKER: "true"
      PG_URL: ${PG_URL}
      PG_DSN_URL: ${PG_DSN_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    networks:
      - coffeeshop-net

  # 7) Reverse-proxy / gateway (port 5000)
  proxy:
    image: meraviglioso8/go-coffeeshop-proxy:dev-latest
    restart: always
    depends_on:
      - product
      - counter
    environment:
      APP_NAME: coffeeshop-proxy
      GRPC_PRODUCT_HOST: product
      GRPC_PRODUCT_PORT: "5001"
      GRPC_COUNTER_HOST: counter
      GRPC_COUNTER_PORT: "5002"
    ports:
      - "5000:5000"
    networks:
      - coffeeshop-net

  # 8) Web frontend (port 8888)
  web:
    image: meraviglioso8/go-coffeeshop-web:dev-latest
    restart: always
    depends_on:
      - proxy
    environment:
      REVERSE_PROXY_URL: http://localhost:5000
      WEB_PORT: "8888"
    ports:
      - "8888:8888"
    networks:
      - coffeeshop-net

  # 9) Watchtower â€“ auto-pulls and restarts services when new images are available
  watchtower:
    image: meraviglioso8/watchtower:dev-latest
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --interval
      - "300"         # check every 5 minutes
      - --cleanup     # remove old images after updating
      - coffeeshop-net/*  # watch all containers on this network
    networks:
      - coffeeshop-net

volumes:
  postgres_data:
  rabbitmq_data:
