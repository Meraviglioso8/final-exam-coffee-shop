name: Scan, Tag, and Push Multiple Docker Images

on:
  pull_request:
    branches:
      - main
    types: [closed] 

  schedule:
    - cron: '0 0 * * *'  # Runs at midnight UTC every day
  
  push:
    branches:
      - develop

  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment tag (dev or prod)'
        required: false
        default: 'dev'

jobs:
  scan_and_push_images:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: meraviglioso8
          password: ${{ secrets.DOCKER_PASSWORD }}  

      # Set environment variable based on the branch or workflow input
      - name: Set environment variable
        id: set_environment
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "ENV_TAG=dev" >> $GITHUB_ENV
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && "${GITHUB_EVENT_INPUTS_ENVIRONMENT}" == "dev" ]]; then
            echo "ENV_TAG=dev" >> $GITHUB_ENV
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && "${GITHUB_EVENT_INPUTS_ENVIRONMENT}" == "prod" ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_ENV
          else
            echo "ENV_TAG=dev" >> $GITHUB_ENV  # Default to 'dev' for manual trigger if no input provided
          fi
          echo "Environment set to $ENV_TAG"

      # Only continue if the current branch is `develop`
      - name: Check if branch is develop
        run: |
          if [[ "${GITHUB_REF}" != "refs/heads/develop" ]]; then
            echo "This cron job only runs on the develop branch."
            exit 0  # Exit the job early if not on the develop branch
          fi

      # Install Trivy
      - name: Install Trivy
        run: |
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb -o trivy.deb
          sudo dpkg -i trivy.deb
      
      # Set GitHub Token for Authenticated Requests for lower rate limiting
      - name: Set GitHub Token for Trivy
        run: |
          echo "${{ secrets.GH_TOKEN }}" > ~/.github_token
          export GITHUB_TOKEN=$(cat ~/.github_token)

      # Define Docker username and Images List
      - name: Define Docker username and Images List
        id: images
        run: |
          export DOCKER_USERNAME=meraviglioso8
          export ENV_TAG=${{ github.event.inputs.environment || 'dev' }}
          echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> $GITHUB_ENV
          echo "ENV_TAG=${ENV_TAG}" >> $GITHUB_ENV
          
          # Define the list of images you want to pull and process
          echo "IMAGES_LIST=${DOCKER_USERNAME}/rabbitmq, \
                 ${DOCKER_USERNAME}/postgres, \
                 ${DOCKER_USERNAME}/watchtower, \
                 ${DOCKER_USERNAME}/go-coffeeshop-product, \
                 ${DOCKER_USERNAME}/go-coffeeshop-counter, \
                 ${DOCKER_USERNAME}/go-coffeeshop-kitchen, \
                 ${DOCKER_USERNAME}/go-coffeeshop-barista, \
                 ${DOCKER_USERNAME}/go-coffeeshop-proxy, \
                 ${DOCKER_USERNAME}/go-coffeeshop-web" >> $GITHUB_ENV

      # Pull, Scan, Tag, and Push each image in the list
      - name: Pull, Scan, Tag, and Push Docker Images
        run: |
          # Split the images into an array
          IFS=',' read -r -a images <<< "$IMAGES_LIST"

          # Loop over each image
          for image in "${images[@]}"
          do
            echo "Processing image: $image"

            docker pull $image

            trivy image --no-progress --exit-code 1 $image >> trivy-scan-report.txt

            VERSION_TAG=$(git rev-parse --short HEAD)
            IMAGE_TAG="${ENV_TAG}-${VERSION_TAG}"
            docker tag $image $image:$IMAGE_TAG

            docker push $image:$IMAGE_TAG

            docker tag $image $image:${ENV_TAG}-latest
            docker push $image:${ENV_TAG}-latest
          done

      # Upload Trivy Scan Report as Artifact
      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-scan-report.txt
