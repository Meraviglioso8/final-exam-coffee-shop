name: Scan, Tag, and Push Multiple Docker Images

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment tag (dev or prod)'
        required: false
        default: 'dev'

jobs:
  scan_and_push_images:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: meraviglioso8
          password: ${{ secrets.DOCKER_PASSWORD }}  

      # Step 4: Install Trivy
      - name: Install Trivy
        run: |
          # Download and install Trivy
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb -o trivy.deb
          sudo dpkg -i trivy.deb

      # Step 5: Define Docker username and Images List
      - name: Define Docker username and Images List
        id: images
        run: |
          export DOCKER_USERNAME=meraviglioso8
          export ENV_TAG=${{ github.event.inputs.environment || 'dev' }}
          echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> $GITHUB_ENV
          echo "ENV_TAG=${ENV_TAG}" >> $GITHUB_ENV
          
          # Define the list of images you want to pull and process
          echo "IMAGES_LIST=${DOCKER_USERNAME}/rabbitmq, \
                 ${DOCKER_USERNAME}/postgre, \
                 ${DOCKER_USERNAME}/go-coffeeshop-product, \
                 ${DOCKER_USERNAME}/go-coffeeshop-counter, \
                 ${DOCKER_USERNAME}/go-coffeeshop-kitchen, \
                 ${DOCKER_USERNAME}/go-coffeeshop-barista, \
                 ${DOCKER_USERNAME}/go-coffeeshop-proxy, \
                 ${DOCKER_USERNAME}/go-coffeeshop-web" >> $GITHUB_ENV

      # Step 6: Pull, Scan, Tag, and Push each image in the list
      - name: Pull, Scan, Tag, and Push Docker Images
        run: |
          # Split the images into an array
          IFS=',' read -r -a images <<< "$IMAGES_LIST"

          # Loop over each image
          for image in "${images[@]}"
          do
            echo "Processing image: $image"

            docker pull $image

            # Scan the image with Trivy and output to a text file (trivy-scan-report.txt)
            trivy image --no-progress --exit-code 1 $image > trivy-scan-report.txt

            # Tag the image with the version tag (based on Git commit SHA)
            VERSION_TAG=$(git rev-parse --short HEAD)  # Use short commit SHA as the version tag
            IMAGE_TAG="${ENV_TAG}-${VERSION_TAG}"     # Add environment (dev/prod) in the tag
            docker tag $image $image:$IMAGE_TAG

            docker push $image:$IMAGE_TAG

            docker tag $image $image:latest
            docker push $image:latest
          done

      # Step 7: Upload Trivy Scan Report as Artifact (text file)
      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-scan-report.txt
